{ "datetime": "2023-03-03T16:26:35.9091498+02:00", "level": "Info", "logger": "Microsoft.Hosting.Lifetime", "machinename": "GEORGE-DESKTOP", "message": "Application started. Press Ctrl+C to shut down.", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:26:35.9281259+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "machinename": "GEORGE-DESKTOP", "message": "Request starting HTTP/2 GET https://localhost:44330/api/Draw/products - -", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:26:35.9438861+02:00", "level": "Info", "logger": "Microsoft.Hosting.Lifetime", "machinename": "GEORGE-DESKTOP", "message": "Hosting environment: Development", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:26:35.9438861+02:00", "level": "Info", "logger": "Microsoft.Hosting.Lifetime", "machinename": "GEORGE-DESKTOP", "message": "Content root path: C:\\Users\\George\\source\\repos\\KinogameAPI\\KinogameAPI\\", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:26:36.0006092+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "machinename": "GEORGE-DESKTOP", "message": "Executing endpoint 'KinoApiGeorge.Controllers.DrawController.Get (API)'", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:26:36.0207833+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "machinename": "GEORGE-DESKTOP", "message": "Route matched with {action = \"Get\", controller = \"Draw\"}. Executing controller action with signature Int32 Get() on controller KinoApiGeorge.Controllers.DrawController (API).", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:26:36.0260957+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "machinename": "GEORGE-DESKTOP", "message": "Executed action KinoApiGeorge.Controllers.DrawController.Get (API) in 2.2622ms", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:26:36.0260957+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "machinename": "GEORGE-DESKTOP", "message": "Executed endpoint 'KinoApiGeorge.Controllers.DrawController.Get (API)'", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:26:36.0260957+02:00", "level": "Error", "logger": "Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware", "machinename": "GEORGE-DESKTOP", "message": "An unhandled exception has occurred while executing the request.", "stackTrace": "   at Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetService(IServiceProvider sp, Type type, Type requiredBy, Boolean isDefaultParameterRequired)\r\n   at lambda_method332(Closure , IServiceProvider , Object[] )\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerActivatorProvider.<>c__DisplayClass7_0.<CreateActivator>b__0(ControllerContext controllerContext)\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerFactoryProvider.<>c__DisplayClass6_0.<CreateControllerFactory>g__CreateController|0(ControllerContext controllerContext)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\r\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)", "exceptionMessage": "Unable to resolve service for type 'Application.Infrastructure.Bus.IMediatorHandler' while attempting to activate 'KinoApiGeorge.Controllers.DrawController'. System.Object GetService(System.IServiceProvider, System.Type, System.Type, Boolean)", "exceptionType": "System.InvalidOperationException", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:26:36.0778489+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "machinename": "GEORGE-DESKTOP", "message": "Request finished HTTP/2 GET https://localhost:44330/api/Draw/products - - - 500 - text/plain;+charset=utf-8 153.1281ms", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:27:06.0022572+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "machinename": "GEORGE-DESKTOP", "message": "Request starting HTTP/2 GET https://localhost:44330/api/Draw/products - -", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:27:06.0022572+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "machinename": "GEORGE-DESKTOP", "message": "Executing endpoint 'KinoApiGeorge.Controllers.DrawController.Get (API)'", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:27:06.0022572+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "machinename": "GEORGE-DESKTOP", "message": "Route matched with {action = \"Get\", controller = \"Draw\"}. Executing controller action with signature Int32 Get() on controller KinoApiGeorge.Controllers.DrawController (API).", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:27:06.0022572+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "machinename": "GEORGE-DESKTOP", "message": "Executed action KinoApiGeorge.Controllers.DrawController.Get (API) in 0.4275ms", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:27:06.0022572+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "machinename": "GEORGE-DESKTOP", "message": "Executed endpoint 'KinoApiGeorge.Controllers.DrawController.Get (API)'", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:27:06.0022572+02:00", "level": "Error", "logger": "Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware", "machinename": "GEORGE-DESKTOP", "message": "An unhandled exception has occurred while executing the request.", "stackTrace": "   at Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetService(IServiceProvider sp, Type type, Type requiredBy, Boolean isDefaultParameterRequired)\r\n   at lambda_method332(Closure , IServiceProvider , Object[] )\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerActivatorProvider.<>c__DisplayClass7_0.<CreateActivator>b__0(ControllerContext controllerContext)\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerFactoryProvider.<>c__DisplayClass6_0.<CreateControllerFactory>g__CreateController|0(ControllerContext controllerContext)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\r\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)", "exceptionMessage": "Unable to resolve service for type 'Application.Infrastructure.Bus.IMediatorHandler' while attempting to activate 'KinoApiGeorge.Controllers.DrawController'. System.Object GetService(System.IServiceProvider, System.Type, System.Type, Boolean)", "exceptionType": "System.InvalidOperationException", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:27:06.0022572+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "machinename": "GEORGE-DESKTOP", "message": "Request finished HTTP/2 GET https://localhost:44330/api/Draw/products - - - 500 - text/plain;+charset=utf-8 5.3791ms", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:28:20.6733624+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "machinename": "GEORGE-DESKTOP", "message": "Request starting HTTP/2 GET https://localhost:44330/api/Draw/products - -", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:28:20.6733624+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "machinename": "GEORGE-DESKTOP", "message": "Executing endpoint 'KinoApiGeorge.Controllers.DrawController.Get (API)'", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:28:20.6733624+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "machinename": "GEORGE-DESKTOP", "message": "Route matched with {action = \"Get\", controller = \"Draw\"}. Executing controller action with signature Int32 Get() on controller KinoApiGeorge.Controllers.DrawController (API).", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:28:20.6733624+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "machinename": "GEORGE-DESKTOP", "message": "Executed action KinoApiGeorge.Controllers.DrawController.Get (API) in 0.4562ms", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:28:20.6733624+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "machinename": "GEORGE-DESKTOP", "message": "Executed endpoint 'KinoApiGeorge.Controllers.DrawController.Get (API)'", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:28:20.6733624+02:00", "level": "Error", "logger": "Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware", "machinename": "GEORGE-DESKTOP", "message": "An unhandled exception has occurred while executing the request.", "stackTrace": "   at Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetService(IServiceProvider sp, Type type, Type requiredBy, Boolean isDefaultParameterRequired)\r\n   at lambda_method332(Closure , IServiceProvider , Object[] )\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerActivatorProvider.<>c__DisplayClass7_0.<CreateActivator>b__0(ControllerContext controllerContext)\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerFactoryProvider.<>c__DisplayClass6_0.<CreateControllerFactory>g__CreateController|0(ControllerContext controllerContext)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\r\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)", "exceptionMessage": "Unable to resolve service for type 'Application.Infrastructure.Bus.IMediatorHandler' while attempting to activate 'KinoApiGeorge.Controllers.DrawController'. System.Object GetService(System.IServiceProvider, System.Type, System.Type, Boolean)", "exceptionType": "System.InvalidOperationException", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:28:20.6733624+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "machinename": "GEORGE-DESKTOP", "message": "Request finished HTTP/2 GET https://localhost:44330/api/Draw/products - - - 500 - text/plain;+charset=utf-8 4.1548ms", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:28:21.9247745+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "machinename": "GEORGE-DESKTOP", "message": "Request starting HTTP/2 GET https://localhost:44330/api/Draw/products - -", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:28:21.9247745+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "machinename": "GEORGE-DESKTOP", "message": "Executing endpoint 'KinoApiGeorge.Controllers.DrawController.Get (API)'", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:28:21.9247745+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "machinename": "GEORGE-DESKTOP", "message": "Route matched with {action = \"Get\", controller = \"Draw\"}. Executing controller action with signature Int32 Get() on controller KinoApiGeorge.Controllers.DrawController (API).", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:28:21.9247745+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "machinename": "GEORGE-DESKTOP", "message": "Executed action KinoApiGeorge.Controllers.DrawController.Get (API) in 0.5522ms", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:28:21.9247745+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "machinename": "GEORGE-DESKTOP", "message": "Executed endpoint 'KinoApiGeorge.Controllers.DrawController.Get (API)'", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:28:21.9247745+02:00", "level": "Error", "logger": "Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware", "machinename": "GEORGE-DESKTOP", "message": "An unhandled exception has occurred while executing the request.", "stackTrace": "   at Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetService(IServiceProvider sp, Type type, Type requiredBy, Boolean isDefaultParameterRequired)\r\n   at lambda_method332(Closure , IServiceProvider , Object[] )\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerActivatorProvider.<>c__DisplayClass7_0.<CreateActivator>b__0(ControllerContext controllerContext)\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerFactoryProvider.<>c__DisplayClass6_0.<CreateControllerFactory>g__CreateController|0(ControllerContext controllerContext)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\r\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)", "exceptionMessage": "Unable to resolve service for type 'Application.Infrastructure.Bus.IMediatorHandler' while attempting to activate 'KinoApiGeorge.Controllers.DrawController'. System.Object GetService(System.IServiceProvider, System.Type, System.Type, Boolean)", "exceptionType": "System.InvalidOperationException", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:28:21.9247745+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "machinename": "GEORGE-DESKTOP", "message": "Request finished HTTP/2 GET https://localhost:44330/api/Draw/products - - - 500 - text/plain;+charset=utf-8 2.5990ms", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:30:12.3572988+02:00", "level": "Info", "logger": "Microsoft.Hosting.Lifetime", "machinename": "GEORGE-DESKTOP", "message": "Application started. Press Ctrl+C to shut down.", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:30:12.3746992+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "machinename": "GEORGE-DESKTOP", "message": "Request starting HTTP/2 GET https://localhost:44330/api/Draw/products - -", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:30:12.3942007+02:00", "level": "Info", "logger": "Microsoft.Hosting.Lifetime", "machinename": "GEORGE-DESKTOP", "message": "Hosting environment: Development", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:30:12.3942007+02:00", "level": "Info", "logger": "Microsoft.Hosting.Lifetime", "machinename": "GEORGE-DESKTOP", "message": "Content root path: C:\\Users\\George\\source\\repos\\KinogameAPI\\KinogameAPI\\", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:30:12.4490005+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "machinename": "GEORGE-DESKTOP", "message": "Executing endpoint 'KinoApiGeorge.Controllers.DrawController.Get (API)'", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:30:12.4702879+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "machinename": "GEORGE-DESKTOP", "message": "Route matched with {action = \"Get\", controller = \"Draw\"}. Executing controller action with signature Int32 Get() on controller KinoApiGeorge.Controllers.DrawController (API).", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:30:12.4702879+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "machinename": "GEORGE-DESKTOP", "message": "Executed action KinoApiGeorge.Controllers.DrawController.Get (API) in 2.1101ms", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:30:12.4702879+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "machinename": "GEORGE-DESKTOP", "message": "Executed endpoint 'KinoApiGeorge.Controllers.DrawController.Get (API)'", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:30:12.4798153+02:00", "level": "Error", "logger": "Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware", "machinename": "GEORGE-DESKTOP", "message": "An unhandled exception has occurred while executing the request.", "stackTrace": "   at Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetService(IServiceProvider sp, Type type, Type requiredBy, Boolean isDefaultParameterRequired)\r\n   at lambda_method332(Closure , IServiceProvider , Object[] )\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerActivatorProvider.<>c__DisplayClass7_0.<CreateActivator>b__0(ControllerContext controllerContext)\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerFactoryProvider.<>c__DisplayClass6_0.<CreateControllerFactory>g__CreateController|0(ControllerContext controllerContext)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\r\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)", "exceptionMessage": "Unable to resolve service for type 'Application.Infrastructure.Bus.IMediatorHandler' while attempting to activate 'KinoApiGeorge.Controllers.DrawController'. System.Object GetService(System.IServiceProvider, System.Type, System.Type, Boolean)", "exceptionType": "System.InvalidOperationException", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:30:12.5310037+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "machinename": "GEORGE-DESKTOP", "message": "Request finished HTTP/2 GET https://localhost:44330/api/Draw/products - - - 500 - text/plain;+charset=utf-8 159.6358ms", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:33:13.8122529+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "machinename": "GEORGE-DESKTOP", "message": "Request starting HTTP/2 GET https://localhost:44330/api/Draw/products - -", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:33:13.8122529+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "machinename": "GEORGE-DESKTOP", "message": "Executing endpoint 'KinoApiGeorge.Controllers.DrawController.Get (API)'", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:33:13.8122529+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "machinename": "GEORGE-DESKTOP", "message": "Route matched with {action = \"Get\", controller = \"Draw\"}. Executing controller action with signature Int32 Get() on controller KinoApiGeorge.Controllers.DrawController (API).", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:33:13.8122529+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "machinename": "GEORGE-DESKTOP", "message": "Executed action KinoApiGeorge.Controllers.DrawController.Get (API) in 0.5175ms", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:33:13.8122529+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "machinename": "GEORGE-DESKTOP", "message": "Executed endpoint 'KinoApiGeorge.Controllers.DrawController.Get (API)'", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:33:13.8122529+02:00", "level": "Error", "logger": "Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware", "machinename": "GEORGE-DESKTOP", "message": "An unhandled exception has occurred while executing the request.", "stackTrace": "   at Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetService(IServiceProvider sp, Type type, Type requiredBy, Boolean isDefaultParameterRequired)\r\n   at lambda_method332(Closure , IServiceProvider , Object[] )\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerActivatorProvider.<>c__DisplayClass7_0.<CreateActivator>b__0(ControllerContext controllerContext)\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerFactoryProvider.<>c__DisplayClass6_0.<CreateControllerFactory>g__CreateController|0(ControllerContext controllerContext)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\r\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)", "exceptionMessage": "Unable to resolve service for type 'Application.Infrastructure.Bus.IMediatorHandler' while attempting to activate 'KinoApiGeorge.Controllers.DrawController'. System.Object GetService(System.IServiceProvider, System.Type, System.Type, Boolean)", "exceptionType": "System.InvalidOperationException", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:33:13.8122529+02:00", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "machinename": "GEORGE-DESKTOP", "message": "Request finished HTTP/2 GET https://localhost:44330/api/Draw/products - - - 500 - text/plain;+charset=utf-8 6.1907ms", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:36:57.1462992+02:00", "level": "Error", "logger": "Program", "machinename": "GEORGE-DESKTOP", "message": "Stopped program because of exception", "stackTrace": "   at MediatR.Extensions.Autofac.DependencyInjection.MediatRModule.Load(ContainerBuilder builder)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.ContainerBuilder.Build(ContainerBuildOptions options)\r\n   at Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory.CreateServiceProvider(ContainerBuilder containerBuilder)\r\n   at Microsoft.Extensions.Hosting.Internal.ServiceFactoryAdapter`1.CreateServiceProvider(Object containerBuilder)\r\n   at Microsoft.Extensions.Hosting.HostBuilder.CreateServiceProvider()\r\n   at Microsoft.Extensions.Hosting.HostBuilder.Build()\r\n   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.Build()\r\n   at Program.<Main>$(String[] args) in C:\\Users\\George\\source\\repos\\KinogameAPI\\KinogameAPI\\Program.cs:line 41", "exceptionMessage": "Could not load type 'MediatR.ServiceFactory' from assembly 'MediatR, Version=12.0.0.0, Culture=neutral, PublicKeyToken=bb9a41a5e8aaa7e2'. Void Load(Autofac.ContainerBuilder)", "exceptionType": "System.TypeLoadException", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:38:56.5523369+02:00", "level": "Error", "logger": "Program", "machinename": "GEORGE-DESKTOP", "message": "Stopped program because of exception", "stackTrace": "   at MediatR.Extensions.Autofac.DependencyInjection.MediatRModule.Load(ContainerBuilder builder)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.ContainerBuilder.Build(ContainerBuildOptions options)\r\n   at Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory.CreateServiceProvider(ContainerBuilder containerBuilder)\r\n   at Microsoft.Extensions.Hosting.Internal.ServiceFactoryAdapter`1.CreateServiceProvider(Object containerBuilder)\r\n   at Microsoft.Extensions.Hosting.HostBuilder.CreateServiceProvider()\r\n   at Microsoft.Extensions.Hosting.HostBuilder.Build()\r\n   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.Build()\r\n   at Program.<Main>$(String[] args) in C:\\Users\\George\\source\\repos\\KinogameAPI\\KinogameAPI\\Program.cs:line 41", "exceptionMessage": "Could not load type 'MediatR.ServiceFactory' from assembly 'MediatR, Version=12.0.0.0, Culture=neutral, PublicKeyToken=bb9a41a5e8aaa7e2'. Void Load(Autofac.ContainerBuilder)", "exceptionType": "System.TypeLoadException", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:42:33.9380058+02:00", "level": "Error", "logger": "Program", "machinename": "GEORGE-DESKTOP", "message": "Stopped program because of exception", "stackTrace": "   at MediatR.Extensions.Autofac.DependencyInjection.MediatRModule.Load(ContainerBuilder builder)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.ContainerBuilder.Build(ContainerBuildOptions options)\r\n   at Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory.CreateServiceProvider(ContainerBuilder containerBuilder)\r\n   at Microsoft.Extensions.Hosting.Internal.ServiceFactoryAdapter`1.CreateServiceProvider(Object containerBuilder)\r\n   at Microsoft.Extensions.Hosting.HostBuilder.CreateServiceProvider()\r\n   at Microsoft.Extensions.Hosting.HostBuilder.Build()\r\n   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.Build()\r\n   at Program.<Main>$(String[] args) in C:\\Users\\George\\source\\repos\\KinogameAPI\\KinogameAPI\\Program.cs:line 41", "exceptionMessage": "Could not load type 'MediatR.ServiceFactory' from assembly 'MediatR, Version=12.0.0.0, Culture=neutral, PublicKeyToken=bb9a41a5e8aaa7e2'. Void Load(Autofac.ContainerBuilder)", "exceptionType": "System.TypeLoadException", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:44:41.7311291+02:00", "level": "Error", "logger": "Program", "machinename": "GEORGE-DESKTOP", "message": "Stopped program because of exception", "stackTrace": "   at MediatR.Extensions.Autofac.DependencyInjection.MediatRModule.Load(ContainerBuilder builder)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.ContainerBuilder.Build(ContainerBuildOptions options)\r\n   at Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory.CreateServiceProvider(ContainerBuilder containerBuilder)\r\n   at Microsoft.Extensions.Hosting.Internal.ServiceFactoryAdapter`1.CreateServiceProvider(Object containerBuilder)\r\n   at Microsoft.Extensions.Hosting.HostBuilder.CreateServiceProvider()\r\n   at Microsoft.Extensions.Hosting.HostBuilder.Build()\r\n   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.Build()\r\n   at Program.<Main>$(String[] args) in C:\\Users\\George\\source\\repos\\KinogameAPI\\KinogameAPI\\Program.cs:line 44", "exceptionMessage": "Could not load type 'MediatR.ServiceFactory' from assembly 'MediatR, Version=12.0.0.0, Culture=neutral, PublicKeyToken=bb9a41a5e8aaa7e2'. Void Load(Autofac.ContainerBuilder)", "exceptionType": "System.TypeLoadException", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:48:19.8978645+02:00", "level": "Error", "logger": "Program", "machinename": "GEORGE-DESKTOP", "message": "Stopped program because of exception", "stackTrace": "   at MediatR.Extensions.Autofac.DependencyInjection.MediatRModule.Load(ContainerBuilder builder)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.ContainerBuilder.Build(ContainerBuildOptions options)\r\n   at Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory.CreateServiceProvider(ContainerBuilder containerBuilder)\r\n   at Microsoft.Extensions.Hosting.Internal.ServiceFactoryAdapter`1.CreateServiceProvider(Object containerBuilder)\r\n   at Microsoft.Extensions.Hosting.HostBuilder.CreateServiceProvider()\r\n   at Microsoft.Extensions.Hosting.HostBuilder.Build()\r\n   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.Build()\r\n   at Program.<Main>$(String[] args) in C:\\Users\\George\\source\\repos\\KinogameAPI\\KinogameAPI\\Program.cs:line 41", "exceptionMessage": "Could not load type 'MediatR.ServiceFactory' from assembly 'MediatR, Version=12.0.0.0, Culture=neutral, PublicKeyToken=bb9a41a5e8aaa7e2'. Void Load(Autofac.ContainerBuilder)", "exceptionType": "System.TypeLoadException", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:52:51.8043619+02:00", "level": "Error", "logger": "Program", "machinename": "GEORGE-DESKTOP", "message": "Stopped program because of exception", "stackTrace": "   at MediatR.Extensions.Autofac.DependencyInjection.MediatRModule.Load(ContainerBuilder builder)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.ContainerBuilder.Build(ContainerBuildOptions options)\r\n   at Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory.CreateServiceProvider(ContainerBuilder containerBuilder)\r\n   at Microsoft.Extensions.Hosting.Internal.ServiceFactoryAdapter`1.CreateServiceProvider(Object containerBuilder)\r\n   at Microsoft.Extensions.Hosting.HostBuilder.CreateServiceProvider()\r\n   at Microsoft.Extensions.Hosting.HostBuilder.Build()\r\n   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.Build()\r\n   at Program.<Main>$(String[] args) in C:\\Users\\George\\source\\repos\\KinogameAPI\\KinogameAPI\\Program.cs:line 72", "exceptionMessage": "Could not load type 'MediatR.ServiceFactory' from assembly 'MediatR, Version=12.0.0.0, Culture=neutral, PublicKeyToken=bb9a41a5e8aaa7e2'. Void Load(Autofac.ContainerBuilder)", "exceptionType": "System.TypeLoadException", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T16:56:15.5045694+02:00", "level": "Error", "logger": "Program", "machinename": "GEORGE-DESKTOP", "message": "Stopped program because of exception", "stackTrace": "   at MediatR.Extensions.Autofac.DependencyInjection.MediatRModule.Load(ContainerBuilder builder)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.ContainerBuilder.Build(ContainerBuildOptions options)\r\n   at Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory.CreateServiceProvider(ContainerBuilder containerBuilder)\r\n   at Microsoft.Extensions.Hosting.Internal.ServiceFactoryAdapter`1.CreateServiceProvider(Object containerBuilder)\r\n   at Microsoft.Extensions.Hosting.HostBuilder.CreateServiceProvider()\r\n   at Microsoft.Extensions.Hosting.HostBuilder.Build()\r\n   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.Build()\r\n   at Program.<Main>$(String[] args) in C:\\Users\\George\\source\\repos\\KinogameAPI\\KinogameAPI\\Program.cs:line 41", "exceptionMessage": "Could not load type 'MediatR.ServiceFactory' from assembly 'MediatR, Version=12.0.0.0, Culture=neutral, PublicKeyToken=bb9a41a5e8aaa7e2'. Void Load(Autofac.ContainerBuilder)", "exceptionType": "System.TypeLoadException", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T17:08:51.4279094+02:00", "level": "Error", "logger": "Program", "machinename": "GEORGE-DESKTOP", "message": "Stopped program because of exception", "stackTrace": "   at MediatR.Extensions.Autofac.DependencyInjection.MediatRModule.Load(ContainerBuilder builder)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.ContainerBuilder.Build(ContainerBuildOptions options)\r\n   at Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory.CreateServiceProvider(ContainerBuilder containerBuilder)\r\n   at Microsoft.Extensions.Hosting.Internal.ServiceFactoryAdapter`1.CreateServiceProvider(Object containerBuilder)\r\n   at Microsoft.Extensions.Hosting.HostBuilder.CreateServiceProvider()\r\n   at Microsoft.Extensions.Hosting.HostBuilder.Build()\r\n   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.Build()\r\n   at Program.<Main>$(String[] args) in C:\\Users\\George\\source\\repos\\KinogameAPI\\KinogameAPI\\Program.cs:line 41", "exceptionMessage": "Could not load type 'MediatR.ServiceFactory' from assembly 'MediatR, Version=12.0.0.0, Culture=neutral, PublicKeyToken=bb9a41a5e8aaa7e2'. Void Load(Autofac.ContainerBuilder)", "exceptionType": "System.TypeLoadException", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T17:17:35.9869320+02:00", "level": "Error", "logger": "Program", "machinename": "GEORGE-DESKTOP", "message": "Stopped program because of exception", "stackTrace": "   at MediatR.Extensions.Autofac.DependencyInjection.MediatRModule.Load(ContainerBuilder builder)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.ContainerBuilder.Build(ContainerBuildOptions options)\r\n   at Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory.CreateServiceProvider(ContainerBuilder containerBuilder)\r\n   at Microsoft.Extensions.Hosting.Internal.ServiceFactoryAdapter`1.CreateServiceProvider(Object containerBuilder)\r\n   at Microsoft.Extensions.Hosting.HostBuilder.CreateServiceProvider()\r\n   at Microsoft.Extensions.Hosting.HostBuilder.Build()\r\n   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.Build()\r\n   at Program.<Main>$(String[] args) in C:\\Users\\George\\source\\repos\\KinogameAPI\\KinogameAPI\\Program.cs:line 42", "exceptionMessage": "Could not load type 'MediatR.ServiceFactory' from assembly 'MediatR, Version=12.0.0.0, Culture=neutral, PublicKeyToken=bb9a41a5e8aaa7e2'. Void Load(Autofac.ContainerBuilder)", "exceptionType": "System.TypeLoadException", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T17:22:39.0900822+02:00", "level": "Error", "logger": "Program", "machinename": "GEORGE-DESKTOP", "message": "Stopped program because of exception", "stackTrace": "   at MediatR.Extensions.Autofac.DependencyInjection.MediatRModule.Load(ContainerBuilder builder)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.ContainerBuilder.Build(ContainerBuildOptions options)\r\n   at Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory.CreateServiceProvider(ContainerBuilder containerBuilder)\r\n   at Microsoft.Extensions.Hosting.Internal.ServiceFactoryAdapter`1.CreateServiceProvider(Object containerBuilder)\r\n   at Microsoft.Extensions.Hosting.HostBuilder.CreateServiceProvider()\r\n   at Microsoft.Extensions.Hosting.HostBuilder.Build()\r\n   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.Build()\r\n   at Program.<Main>$(String[] args) in C:\\Users\\George\\source\\repos\\KinogameAPI\\KinogameAPI\\Program.cs:line 42", "exceptionMessage": "Could not load type 'MediatR.ServiceFactory' from assembly 'MediatR, Version=12.0.0.0, Culture=neutral, PublicKeyToken=bb9a41a5e8aaa7e2'. Void Load(Autofac.ContainerBuilder)", "exceptionType": "System.TypeLoadException", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T18:39:37.7217869+02:00", "level": "Error", "logger": "Program", "machinename": "GEORGE-DESKTOP", "message": "Stopped program because of exception", "stackTrace": "   at MediatR.Extensions.Autofac.DependencyInjection.MediatRModule.Load(ContainerBuilder builder)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.ContainerBuilder.Build(ContainerBuildOptions options)\r\n   at Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory.CreateServiceProvider(ContainerBuilder containerBuilder)\r\n   at Microsoft.Extensions.Hosting.Internal.ServiceFactoryAdapter`1.CreateServiceProvider(Object containerBuilder)\r\n   at Microsoft.Extensions.Hosting.HostBuilder.CreateServiceProvider()\r\n   at Microsoft.Extensions.Hosting.HostBuilder.Build()\r\n   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.Build()\r\n   at Program.<Main>$(String[] args) in C:\\Users\\George\\source\\repos\\KinogameAPI\\KinogameAPI\\Program.cs:line 73", "exceptionMessage": "Could not load type 'MediatR.ServiceFactory' from assembly 'MediatR, Version=12.0.0.0, Culture=neutral, PublicKeyToken=bb9a41a5e8aaa7e2'. Void Load(Autofac.ContainerBuilder)", "exceptionType": "System.TypeLoadException", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T18:48:27.6819461+02:00", "level": "Error", "logger": "Program", "machinename": "GEORGE-DESKTOP", "message": "Stopped program because of exception", "stackTrace": "   at MediatR.Extensions.Autofac.DependencyInjection.MediatRModule.Load(ContainerBuilder builder)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.ContainerBuilder.Build(ContainerBuildOptions options)\r\n   at Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory.CreateServiceProvider(ContainerBuilder containerBuilder)\r\n   at Microsoft.Extensions.Hosting.Internal.ServiceFactoryAdapter`1.CreateServiceProvider(Object containerBuilder)\r\n   at Microsoft.Extensions.Hosting.HostBuilder.CreateServiceProvider()\r\n   at Microsoft.Extensions.Hosting.HostBuilder.Build()\r\n   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.Build()\r\n   at Program.<Main>$(String[] args) in C:\\Users\\George\\source\\repos\\KinogameAPI\\KinogameAPI\\Program.cs:line 73", "exceptionMessage": "Could not load type 'MediatR.ServiceFactory' from assembly 'MediatR, Version=12.0.0.0, Culture=neutral, PublicKeyToken=bb9a41a5e8aaa7e2'. Void Load(Autofac.ContainerBuilder)", "exceptionType": "System.TypeLoadException", "department": "sportsbook", "service": "opta" }
{ "datetime": "2023-03-03T18:50:44.8542986+02:00", "level": "Error", "logger": "Program", "machinename": "GEORGE-DESKTOP", "message": "Stopped program because of exception", "stackTrace": "   at MediatR.Extensions.Autofac.DependencyInjection.MediatRModule.Load(ContainerBuilder builder)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.Module.Configure(IComponentRegistryBuilder componentRegistry)\r\n   at Autofac.ContainerBuilder.Build(IComponentRegistryBuilder componentRegistry, Boolean excludeDefaultModules)\r\n   at Autofac.ContainerBuilder.Build(ContainerBuildOptions options)\r\n   at Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory.CreateServiceProvider(ContainerBuilder containerBuilder)\r\n   at Microsoft.Extensions.Hosting.Internal.ServiceFactoryAdapter`1.CreateServiceProvider(Object containerBuilder)\r\n   at Microsoft.Extensions.Hosting.HostBuilder.CreateServiceProvider()\r\n   at Microsoft.Extensions.Hosting.HostBuilder.Build()\r\n   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.Build()\r\n   at Program.<Main>$(String[] args) in C:\\Users\\George\\source\\repos\\KinogameAPI\\KinogameAPI\\Program.cs:line 74", "exceptionMessage": "Could not load type 'MediatR.ServiceFactory' from assembly 'MediatR, Version=12.0.0.0, Culture=neutral, PublicKeyToken=bb9a41a5e8aaa7e2'. Void Load(Autofac.ContainerBuilder)", "exceptionType": "System.TypeLoadException", "department": "sportsbook", "service": "opta" }
